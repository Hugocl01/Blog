---
import { Picture } from "astro:assets";

const { title, url, date, readingTime, description, image, tags } = Astro.props;

// Creo un objeto Date con la fecha de publicacion pubDate que llega a traves de date para formatear la fecha en espa√±ol
const formattedDate = new Date(date).toLocaleDateString("es-ES", {
    year: "numeric",
    month: "long",
    day: "numeric",
});
---

<article class="card">
    <header class="card-header">
        <h2 class="card-title">{title}</h2>
        <div class="card-meta">
            <p class="card-date">üìÖ {formattedDate}</p>
            <p class="card-reading-time">‚è≥ {readingTime}</p>
        </div>
        <figure class="card-image">
            <Picture
                src={image.url}
                alt={image.alt}
                format="avif"
                inferSize={true}
                widths={image.width}
                decoding="async"
                loading="lazy"
            />
        </figure>
    </header>
    <div class="tags">
        {
            tags.map((tag) => (
                <a
                    href={`/tags/${tag}`}
                    class="tag"
                    title={"Ver publicaciones con la etiqueta " + tag}
                    onclick="event.stopPropagation();"
                >
                    #{tag}
                </a>
            ))
        }
    </div>
    <p class="card-description">{description}</p>
    <footer class="card-footer">
        <a
            href={url}
            class="card-link"
            title="Leer el art√≠culo completo"
            onclick="event.stopPropagation();">Leer m√°s ‚Üí</a
        >
    </footer>
</article>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Selecciona todos los elementos con la clase "card"
        let articles = document.querySelectorAll(".card");

        // Recorre cada art√≠culo y a√±ade el evento de clic
        articles.forEach(function (article) {
            // Selecciona el elemento <a> con la clase "card-link" dentro del art√≠culo actual
            let urlElement = article.querySelector(".card-link");

            // Verificar si el elemento .card-link existe y tiene un href v√°lido
            if (urlElement && urlElement.hasAttribute("href")) {
                article.addEventListener("click", function () {
                    window.location.href = urlElement.getAttribute("href");
                });
            }
        });
    });
</script>

<style>
    @import url(../styles/global.css);

    .card {
        background-color: var(--background);
        border: 1px solid var(--box-shadow);
        border-radius: 12px;
        box-shadow: 0 6px 20px var(--box-shadow);
        overflow: hidden;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        padding: 1.5rem;
        color: var(--text-color);
    }

    .card:hover,
    .card:focus {
        cursor: pointer;
        transform: translateY(-8px);
        box-shadow: 0 10px 30px var(--box-shadow);
    }

    .card-header {
        margin-bottom: 1rem;
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--text-h3);
        margin-bottom: 0.5rem;
    }

    .card-meta {
        font-size: 0.875rem;
        color: var(--text-color);
        display: flex;
        justify-content: space-between;
        gap: 1rem;
    }

    .card-image {
        margin: 1rem 0;
        border-radius: 12px;
        overflow: hidden;
    }

    .card-description {
        font-size: 1rem;
        line-height: 1.6;
        color: var(--text-p);
        margin-bottom: 1.5rem;
    }

    .card-footer {
        display: flex;
        justify-content: flex-end;
    }

    .card-link {
        font-size: 1rem;
        color: #007acc;
        text-decoration: none;
        font-weight: 700;
        transition: color 0.3s ease;
    }

    .card-link:hover,
    .card-link:focus {
        color: #005a99;
    }
</style>
